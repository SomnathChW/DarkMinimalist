📘 Product Requirements Document (PRD)
📌 Project Title
Image Folder Manager & Cropper (Vite + ShadCN UI)

🎯 Objective
Create a beautiful, non-resizable, non-expandable 16:9 GUI (max 70% of screen height) image cropper and manager tool using Vite, React, and ShadCN UI. The tool allows users to:

Select an input folder containing images.

Validate contents and preview thumbnails.

Optionally rename files.

Crop selected images with a Photoshop-like overlay.

Resize/pad images to a target size.

Save them to an auto-created output folder.

Reset and return to the home screen after completion.

🖥️ Main UI Layout
Aspect Ratio: 16:9, centered, max 70% screen height.

Layout: Two-column split:

Left Pane: Folder input and thumbnail display.

Right Pane: Carousel, cropper, and final controls.

🧩 UI Breakdown
🔻 Left Panel (Drawer Style)
📂 Folder Selection Section
Folder input field with a “Select Folder” button.

Manual path entry supported.

✅ Validations:

If no files: Show red error message.

If valid: Show green success message.

Count:

Total images.

Non-image files.

If non-image files exist:

Display their extensions with checkboxes to optionally treat them as images.

🧾 Rename Toggle
Checkbox: "Rename files?"

If checked: Rename workflow on export.

If not: Skip to resizing.

🖼️ Image Thumbnail Gallery
Scrollable grid of rounded image previews.

File types not previewable → show a default file icon.

Each image has:

Bottom-right corner checkbox (select for processing).

🖼️ Right Panel
🔄 Image Carousel (for selected thumbnails)
Horizontal scrollable thumbnail bar at the bottom.

Buttons: Previous, Next.

Centered image is the active one (highlighted with border).

At bottom right: A Crop Tool activation button.

✂️ Crop Mode Workflow
Cursor changes to a plus icon.

Click & drag to draw a crop box (resizable).

After crop selection:

✅ Confirm with tick button.

Skip to next or revisit in any order.

All selected images can be cropped or skipped.

End with a "Done" button.

🛠️ Final Processing Workflow
🔁 Rename Logic (if selected)
Prompt user for a base name.

Preview: baseName_1, baseName_2, etc.

📏 Resize & Padding
Prompt for target image size (e.g. 1024x1024).

Lock aspect ratio option.

For each image (cropped or not):

Resize to fit within target dimensions, preserving aspect ratio.

Add white padding if required (height or width mismatch).

🧃 Output View (Post-Processing)
Output folder auto-created inside selected folder.

Right pane shows:

Input for output folder name (defaults to "output").

Left pane shows:

Scrollable preview carousel of final images (75% width).

Final Save button.

Output images are saved as: resized_originalfilename.ext

On successful save:

Show a success message.

Reset UI to initial screen.

🧱 Folder Structure
bash
Copy
Edit
image-crop-tool/
├── main.py (or main.tsx for Vite)
├── requirements.txt (if Python, skip for React)
├── /components
│   └── All UI Components (ShadCN based)
├── /utils
│   └── File validators, image type checkers, renamers
├── /hooks
│   └── Custom hooks (e.g., folder access, crop state)
├── /contexts
│   └── Shared state (e.g., selected folder, images)
├── /constants
│   └── `colors.ts`, `strings.ts`, `appConfig.ts`
├── /crop
│   └── Crop tool logic (separate crop state)
├── /resizer
│   └── Resize, aspect ratio, and padding logic
├── /output
│   └── Final save logic
🧪 Runtime Behavior
On app start:

Check for necessary environment (Node, browser APIs).

In terminal: Print "UI started successfully." or error message for missing dependencies.

🧑‍💻 Developer Experience
All strings, icons, and colors stored in a central constants file.

Functions are split based on feature/domain (e.g., crop, resize).

Tooltips for long explanations.

Concise user-facing text (short, friendly, clear).

Inline comments on all complex logic blocks.

Would you like me to now start building the code files for this Vite + ShadCN UI app step-by-step starting with the main file and folder structure?








